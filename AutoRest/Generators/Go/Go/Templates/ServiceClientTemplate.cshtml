@using System;
@using System.Collections.Generic;

@using Microsoft.Rest.Generator.Go
@using Microsoft.Rest.Generator.Go.Templates
@using Microsoft.Rest.Generator.Utilities
@using System.Linq

@inherits Microsoft.Rest.Generator.Go.Template<Microsoft.Rest.Generator.Go.ServiceClientTemplateModel>
@{
    var imports = Model.Imports;
    var modelName = GoCodeNamer.CamelCase(Model.Name);
}
@WrapComment("// ", Model.Documentation)
package @Model.PackageName
@EmptyLine
@Header("// ")

@EmptyLine
import (
@foreach (var import in imports)
{
    @:"@(import)"
}
)

@EmptyLine
const (
    // APIVersion is the version of the @(Model.ServiceName)
    APIVersion = "@Model.ApiVersion"
    @EmptyLine
    // DefaultBaseURI is the default URI used for the service @(Model.ServiceName)
    DefaultBaseURI = "@Model.BaseUrl"
)

@EmptyLine
@WrapComment("// ", Model.ClientDocumentation)
type @(Model.ClientName) struct {
    autorest.Client
    BaseURI string
APIVersion string
@foreach (var p in Model.Properties)
{
    if (!p.SerializedName.IsApiVersion())
    {
        @:@(string.Format("{0} {1}", p.Name, p.Type.Name))
    }
}
}

@EmptyLine
@WrapComment("// ", string.Format("New creates an instance of the {0} client.", Model.ClientName))
func New(subscriptionID string) @(Model.ClientName) {
    return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

@EmptyLine
@WrapComment("// ", string.Format("NewWithBaseURI creates an instance of the {0} client.", Model.ClientName))
func New(@(Model.GlobalParameters)) @(Model.ClientName) {
    return @(Model.ClientName){
        Client: autorest.NewClientWithUserAgent(UserAgent()),
       BaseURI: DefaultBaseURI,
        APIVersion: APIVersion,
         @foreach (var p in Model.Properties)
         {
         if (!p.SerializedName.IsApiVersion())
         {
         @:@(string.Format("{0}: {1},", p.Name, p.Name.ToSentence()))
         }
         }
    }
}

@EmptyLine
@foreach (var method in Model.MethodTemplateModels)
{
@:@(Include<MethodTemplate, MethodTemplateModel>(new MethodTemplate(), method))
@:@EmptyLine
}
